// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: preferences.sql

package repository

import (
	"context"
)

const createPreference = `-- name: CreatePreference :exec
INSERT INTO preferences (chat_id, user_id, preference_key, preference_value)
VALUES (?, ?, ?, ?)
`

type CreatePreferenceParams struct {
	ChatID          string
	UserID          string
	PreferenceKey   string
	PreferenceValue string
}

func (q *Queries) CreatePreference(ctx context.Context, arg CreatePreferenceParams) error {
	_, err := q.db.ExecContext(ctx, createPreference,
		arg.ChatID,
		arg.UserID,
		arg.PreferenceKey,
		arg.PreferenceValue,
	)
	return err
}

const deletePreference = `-- name: DeletePreference :exec
DELETE FROM preferences
WHERE id = ?
`

func (q *Queries) DeletePreference(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePreference, id)
	return err
}

const getPreferenceByID = `-- name: GetPreferenceByID :one
SELECT id, chat_id, user_id, preference_key, preference_value
FROM preferences
WHERE id = ?
`

type GetPreferenceByIDRow struct {
	ID              string
	ChatID          string
	UserID          string
	PreferenceKey   string
	PreferenceValue string
}

func (q *Queries) GetPreferenceByID(ctx context.Context, id string) (GetPreferenceByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPreferenceByID, id)
	var i GetPreferenceByIDRow
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.UserID,
		&i.PreferenceKey,
		&i.PreferenceValue,
	)
	return i, err
}

const getPreferencesByChatID = `-- name: GetPreferencesByChatID :many
SELECT id, chat_id, user_id, preference_key, preference_value
FROM preferences
WHERE chat_id = ?
`

type GetPreferencesByChatIDRow struct {
	ID              string
	ChatID          string
	UserID          string
	PreferenceKey   string
	PreferenceValue string
}

func (q *Queries) GetPreferencesByChatID(ctx context.Context, chatID string) ([]GetPreferencesByChatIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPreferencesByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPreferencesByChatIDRow
	for rows.Next() {
		var i GetPreferencesByChatIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.UserID,
			&i.PreferenceKey,
			&i.PreferenceValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePreference = `-- name: UpdatePreference :exec
UPDATE preferences
SET preference_key = ?, preference_value = ?
WHERE id = ?
`

type UpdatePreferenceParams struct {
	PreferenceKey   string
	PreferenceValue string
	ID              string
}

func (q *Queries) UpdatePreference(ctx context.Context, arg UpdatePreferenceParams) error {
	_, err := q.db.ExecContext(ctx, updatePreference, arg.PreferenceKey, arg.PreferenceValue, arg.ID)
	return err
}
