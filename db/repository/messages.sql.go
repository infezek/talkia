// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: messages.sql

package repository

import (
	"context"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (id, chat_id, user_id, who, message, created_at)
VALUES (?, ?, ?, ?, ?, NOW())
`

type CreateMessageParams struct {
	ID      string
	ChatID  string
	UserID  string
	Who     MessagesWho
	Message string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.ExecContext(ctx, createMessage,
		arg.ID,
		arg.ChatID,
		arg.UserID,
		arg.Who,
		arg.Message,
	)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, chat_id, user_id, who, message
FROM messages
WHERE id = ?
`

type GetMessageByIDRow struct {
	ID      string
	ChatID  string
	UserID  string
	Who     MessagesWho
	Message string
}

func (q *Queries) GetMessageByID(ctx context.Context, id string) (GetMessageByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getMessageByID, id)
	var i GetMessageByIDRow
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.UserID,
		&i.Who,
		&i.Message,
	)
	return i, err
}

const getMessagesByChatID = `-- name: GetMessagesByChatID :many
SELECT id, chat_id, user_id, who, message FROM messages WHERE chat_id = ? ORDER BY id DESC LIMIT 10
`

type GetMessagesByChatIDRow struct {
	ID      string
	ChatID  string
	UserID  string
	Who     MessagesWho
	Message string
}

func (q *Queries) GetMessagesByChatID(ctx context.Context, chatID string) ([]GetMessagesByChatIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesByChatIDRow
	for rows.Next() {
		var i GetMessagesByChatIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.UserID,
			&i.Who,
			&i.Message,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
