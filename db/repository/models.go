// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type MessagesWho string

const (
	MessagesWhoUser   MessagesWho = "user"
	MessagesWhoSystem MessagesWho = "system"
)

func (e *MessagesWho) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessagesWho(s)
	case string:
		*e = MessagesWho(s)
	default:
		return fmt.Errorf("unsupported scan type for MessagesWho: %T", src)
	}
	return nil
}

type NullMessagesWho struct {
	MessagesWho MessagesWho
	Valid       bool // Valid is true if MessagesWho is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessagesWho) Scan(value interface{}) error {
	if value == nil {
		ns.MessagesWho, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessagesWho.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessagesWho) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessagesWho), nil
}

type UsersGender string

const (
	UsersGenderMasculine UsersGender = "masculine"
	UsersGenderFeminine  UsersGender = "feminine"
	UsersGenderNeutral   UsersGender = "neutral"
)

func (e *UsersGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersGender(s)
	case string:
		*e = UsersGender(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersGender: %T", src)
	}
	return nil
}

type NullUsersGender struct {
	UsersGender UsersGender
	Valid       bool // Valid is true if UsersGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersGender) Scan(value interface{}) error {
	if value == nil {
		ns.UsersGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersGender), nil
}

type UsersLanguage string

const (
	UsersLanguageEnglish    UsersLanguage = "english"
	UsersLanguagePortuguese UsersLanguage = "portuguese"
	UsersLanguageSpanish    UsersLanguage = "spanish"
)

func (e *UsersLanguage) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersLanguage(s)
	case string:
		*e = UsersLanguage(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersLanguage: %T", src)
	}
	return nil
}

type NullUsersLanguage struct {
	UsersLanguage UsersLanguage
	Valid         bool // Valid is true if UsersLanguage is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersLanguage) Scan(value interface{}) error {
	if value == nil {
		ns.UsersLanguage, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersLanguage.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersLanguage) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersLanguage), nil
}

type UsersPlatform string

const (
	UsersPlatformAndroid UsersPlatform = "android"
	UsersPlatformIos     UsersPlatform = "ios"
)

func (e *UsersPlatform) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersPlatform(s)
	case string:
		*e = UsersPlatform(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersPlatform: %T", src)
	}
	return nil
}

type NullUsersPlatform struct {
	UsersPlatform UsersPlatform
	Valid         bool // Valid is true if UsersPlatform is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersPlatform) Scan(value interface{}) error {
	if value == nil {
		ns.UsersPlatform, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersPlatform.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersPlatform) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersPlatform), nil
}

type Bot struct {
	ID            string
	UserID        string
	CategoryID    string
	Name          string
	Personality   string
	Description   string
	AvatarUrl     string
	BackgroundUrl string
	Location      string
	Published     bool
	Active        bool
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

type Category struct {
	ID        string
	Name      string
	Active    bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Chat struct {
	ID        string
	UserID    string
	BotID     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Message struct {
	ID        string
	ChatID    string
	UserID    string
	Who       MessagesWho
	Message   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Preference struct {
	ID              string
	ChatID          string
	UserID          string
	PreferenceKey   string
	PreferenceValue string
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

type User struct {
	ID        string
	Username  string
	Email     string
	AvatarUrl sql.NullString
	Password  string
	Language  UsersLanguage
	Platform  UsersPlatform
	Gender    NullUsersGender
	Location  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type UserLikeBot struct {
	ID        string
	UserID    string
	BotID     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type UsersCategory struct {
	ID         string
	UserID     string
	CategoryID string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}
