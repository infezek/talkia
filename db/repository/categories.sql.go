// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: categories.sql

package repository

import (
	"context"
	"time"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories 
(id, name, active, created_at)
VALUES (?, ?, ?, ?)
`

type CreateCategoryParams struct {
	ID        string
	Name      string
	Active    bool
	CreatedAt time.Time
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Active,
		arg.CreatedAt,
	)
	return err
}

const findCategoriesByUserID = `-- name: FindCategoriesByUserID :many
SELECT c.id, c.name, c.active, c.created_at, c.updated_at FROM categories c
JOIN users_categories uc ON c.id = uc.category_id
WHERE uc.user_id = ?
`

func (q *Queries) FindCategoriesByUserID(ctx context.Context, userID string) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, findCategoriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCategoryByID = `-- name: FindCategoryByID :one
SELECT id, name, active, created_at, updated_at FROM categories WHERE id = ?
`

func (q *Queries) FindCategoryByID(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRowContext(ctx, findCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCategoryByName = `-- name: FindCategoryByName :one
SELECT id, name, active, created_at, updated_at FROM categories WHERE name = ?
`

func (q *Queries) FindCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, findCategoryByName, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT c.id, c.name, c.active, c.created_at, c.updated_at FROM categories c WHERE c.active = True  ORDER BY created_at DESC LIMIT ? OFFSET ?
`

type ListCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesCount = `-- name: ListCategoriesCount :one
SELECT count(*) FROM categories c WHERE c.active = True
`

func (q *Queries) ListCategoriesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, listCategoriesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories
SET name = ?, active = ?
WHERE id = ?
`

type UpdateCategoryParams struct {
	Name   string
	Active bool
	ID     string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.Name, arg.Active, arg.ID)
	return err
}
